name: Build

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:

  buildAndRelease:

    strategy:
      matrix:
        # os: [ windows-latest, ubuntu-latest, macos-latest ]
        os: [ macos-latest ]
        include:
          # - os: windows-latest
          #   extension: "dll"
          #   runtime: "win-x64"
          #   filename: "librocksdb.dll"
          # - os: ubuntu-latest
          #   extension: "so"
          #   runtime: "linux-x64"
          #   filename: "librocksdb.so"
          - os: macos-latest
            runtime: "osx-x64"
            extension: "dylib"
            filename: "librocksdb.dylib"
      fail-fast: false

    runs-on: ${{ matrix.os }}

    env:
      PROJECT_PATH: './csharp/RocksDbSharp.csproj'
      BUILD_CONFIGURATION: 'Release'
      # SOLUTION_PATH: 'src/RocksDB.sln'
      # BUILD_CONFIGURATION: 'Release'

    steps:

    - uses: actions/checkout@v2
      name: Checkout

    - name: Variables
      run: |
        ROCKSDBVNUM=`cat rocksdbversion`
        echo "ROCKSDBVERSION=$(cat rocksdbversion)" >> $GITHUB_ENV
        echo "ROCKSDBRELEASE=$(cat rocksdbversion).$(cat revision)" >> $GITHUB_ENV
      shell: bash

    - name: List variables
      run: |
        echo $ROCKSDBVERSION
        echo $ROCKSDBRELEASE
      shell: bash

    - name: Display structure of files (before build)
      run: ls -R

    # - name: Build Linux/Mac
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     chmod +x ./build-rocksdb.sh
    #     sh ./build-rocksdb.sh
    #   shell: bash
    #   working-directory: ${{ github.workspace }}/build-native/

    # - name: Display structure of files (after build)
    #   run: ls -R

    - name: Run CodeGen
      run: dotnet run ${{ github.workspace }}/build-codegen/CSharpGen.csproj
      working-directory: "${{ github.workspace }}/build-codegen/"

    - name: Build
      run: dotnet build -p:Version=${{env.ROCKSDBRELEASE}} -p:AllowUnsafeBlocks=True -p:LangVersion=latest --configuration ${{env.BUILD_CONFIGURATION}} ${{env.PROJECT_PATH}}

    - name: Nuget Pack
      run: dotnet pack --no-build -p:Version=${{env.ROCKSDBRELEASE}} -p:AllowUnsafeBlocks=True -p:LangVersion=latest --configuration ${{env.BUILD_CONFIGURATION}} --output "${{github.workspace}}/package/" ${{env.PROJECT_PATH}}

    - name: Install dependencies
      run: dotnet restore
      working-directory: "${{ github.workspace }}/verifier/"

    # - name: Copy Native Libraries
    #   run: |
    #     cp "${{github.workspace}}/lib/librocksdb.dylib" "${{ github.workspace }}/csharp/runtimes/osx-x64/native/librocksdb.dylib"
    #     cp "${{github.workspace}}/lib/libzstd.1.dylib" "/usr/local/opt/zstd/lib/libzstd.1.dylib"
    #     cp "${{github.workspace}}/lib/libsnappy.1.dylib" "/usr/local/opt/snappy/lib/libsnappy.1.dylib"
    #     cp "${{github.workspace}}/lib/liblz4.1.dylib" "/usr/local/opt/lz4/lib/liblz4.1.dylib"
    #   shell: bash

    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: "${{ github.workspace }}/verifier/"

    - name: Display structure of files
      run: ls -R
      working-directory: "${{ github.workspace }}/verifier/"

    - name: Test
      run: dotnet run --configuration Release
      working-directory: "${{ github.workspace }}/verifier/"

    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: Blockcore-RocksDB-NuGet-${{env.ROCKSDBRELEASE}}-preview
    #     path: "${{github.workspace}}/package/"

    # - name: Nuget Push
    #   run: nuget push "${{github.workspace}}/package/*.nupkg" -ApiKey ${{secrets.NUGET_KEY}} -Source "https://api.nuget.org/v3/index.json" -SkipDuplicate

    # - name: Release
    #   uses: sondreb/action-release@main
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     #files: "${{github.workspace}}/build-native/runtimes/${{ matrix.runtime }}/native/librocksdb.${{ matrix.extension }}"
    #     folder: "${{github.workspace}}/build-native/runtimes/${{ matrix.runtime }}/native/"
    #     draft: true
    #     prerelease: false
    #     body: 'win-x64 (.dll), linux-x64 (.so), osx-x64 (.dylip)'
    #     name: "Blockcore RocksDB Native (Release ${{env.ROCKSDBRELEASE}})"
    #     tag: ${{env.ROCKSDBRELEASE}}


# name: Build

# on:
#   push:
#     branches:
#       - main

#   workflow_dispatch:

# jobs:

#   buildAndTest:

#     strategy:
#       matrix:
#         os: [ windows-latest, ubuntu-latest, macos-latest ]
#         # include:
#         #   - os: windows-latest
#         #     extension: "dll"
#         #     runtime: "win-x64"
#         #     filename: "librocksdb.dll"
#         #   - os: ubuntu-latest
#         #     extension: "so"
#         #     runtime: "linux-x64"
#         #     filename: "librocksdb.so"
#         #   - os: macos-latest
#         #     runtime: "osx-x64"
#         #     extension: "dylib"
#         #     filename: "librocksdb.dylib"
#       fail-fast: false

#     runs-on: ${{ matrix.os }}

#     steps:

#     - uses: actions/checkout@v2
#       name: Checkout

#     - name: Install dependencies
#       run: dotnet restore

#     - name: Build
#       run: dotnet build --configuration Release --no-restore

#     - name: Display structure of files
#       run: ls -R

#     - name: Test
#       run: dotnet run --configuration Release
#       #run: dotnet test --no-restore --verbosity normal
